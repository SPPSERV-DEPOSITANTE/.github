name: Task Done - Zerar e Definir Data

on:
  schedule:
    - cron: '*/5 * * * *' # roda a cada 5 minutos
  workflow_dispatch: # permite execu√ß√£o manual

jobs:
  atualizar_campos:
    runs-on: ubuntu-latest

    steps:
      - name: Instalar GH CLI e jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Autenticar no GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GH_PAT }}"

      - name: Zerar Remaining e atualizar Finish at para cards Done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name || github.repository }}
          PROJECT_NUMBER: 3   # <-- ALTERE para o n√∫mero do seu projeto
          FIELD_NAME_REMAINING: Remaining
          FIELD_NAME_FINISH_AT: "Finish at"
          STATUS_FIELD_NAME: Status
          DONE_VALUE: Done
        run: |
          TODAY_DATE=$(date +%Y-%m-%d)

          gh api graphql -F owner="$OWNER" -F repo="$REPO" -F projectNumber=$PROJECT_NUMBER -f query='
            query($owner: String!, $repo: String!, $projectNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                projectV2(number: $projectNumber) {
                  id
                  fields(first: 100) {
                    nodes {
                      ... on ProjectV2FieldCommon {
                        id
                        name
                      }
                    }
                  }
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          number
                          title
                        }
                      }
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                            field {
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                          }
                          ... on ProjectV2ItemFieldNumberValue {
                            number
                            field {
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                          }
                          ... on ProjectV2ItemFieldDateValue {
                            date
                            field {
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }' > result.json

          PROJECT_ID=$(jq -r '.data.repository.projectV2.id' result.json)
          REMAINING_FIELD_ID=$(jq -r --arg FN "$FIELD_NAME_REMAINING" '.data.repository.projectV2.fields.nodes[] | select(.name == $FN) | .id' result.json)
          FINISH_AT_FIELD_ID=$(jq -r --arg FN "$FIELD_NAME_FINISH_AT" '.data.repository.projectV2.fields.nodes[] | select(.name == $FN) | .id' result.json)

          jq -c '.data.repository.projectV2.items.nodes[]' result.json | while read -r item; do
            ITEM_ID=$(echo "$item" | jq -r '.id')
            TITLE=$(echo "$item" | jq -r '.content.title // "Sem t√≠tulo"')
            STATUS=$(echo "$item" | jq -r --arg SF "$STATUS_FIELD_NAME" '.fieldValues.nodes[] | select(.field.name == $SF) | .name')
            REMAINING=$(echo "$item" | jq -r --arg FN "$FIELD_NAME_REMAINING" '.fieldValues.nodes[] | select(.field.name == $FN) | .number // empty')
            FINISH_AT=$(echo "$item" | jq -r --arg FN "$FIELD_NAME_FINISH_AT" '.fieldValues.nodes[] | select(.field.name == $FN) | .date // empty')

            if [[ "$STATUS" == "$DONE_VALUE" ]]; then
              if [[ "$REMAINING" != "0" && "$REMAINING" != "" ]]; then
                echo "üõ†Ô∏è ZERANDO 'Remaining' para: $TITLE"
                gh api graphql -f query='
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { number: 0 }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }' \
                  -F projectId=$PROJECT_ID \
                  -F itemId=$ITEM_ID \
                  -F fieldId=$REMAINING_FIELD_ID > /dev/null
              fi

              if [[ "$FINISH_AT" == "" || "$FINISH_AT" == "null" ]]; then
                echo "üìÖ Atualizando 'Finish at' para data atual ($TODAY_DATE) em: $TITLE"
                gh api graphql -f query='
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: DateTime!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { date: $date }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }' \
                  -F projectId=$PROJECT_ID \
                  -F itemId=$ITEM_ID \
                  -F fieldId=$FINISH_AT_FIELD_ID \
                  -F date="${TODAY_DATE}" > /dev/null
              fi
            fi
          done
